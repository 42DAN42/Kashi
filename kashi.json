{
  "BTTWidgetName" : "Kashi",
  "BTTTriggerType" : 642,
  "BTTTriggerTypeDescription" : "Shell Script \/ Task Widget",
  "BTTTriggerClass" : "BTTTriggerTypeTouchBar",
  "BTTPredefinedActionType" : -1,
  "BTTPredefinedActionName" : "No Action",
  "BTTShellScriptWidgetGestureConfig" : "\/usr\/local\/bin\/python3:::-c",
  "BTTEnabled2" : 1,
  "BTTUUID" : "95653398-A5C2-4A84-8B16-02C473F6C59B",
  "BTTEnabled" : 1,
  "BTTOrder" : 4,
  "BTTTriggerConfig" : {
    "BTTScriptType" : 0,
    "BTTTouchBarApplyCornerRadiusTo" : 1,
    "BTTTouchBarButtonColor" : "0.000000, 0.000000, 0.000000, 255.000000",
    "BTTTouchBarButtonTextAlignment" : 1,
    "BTTTouchBarButtonFontSize" : 0,
    "BTTTouchBarItemIconWidth" : 22,
    "BTTTouchBarButtonCornerRadius" : 6,
    "BTTTouchBarFontColor" : "254.881188, 252.030672, 120.527085, 255.000000",
    "BTTTouchBarAlternateBackgroundColor" : "0.000000, 0.000000, 0.000000, 255.000000",
    "BTTTouchBarItemPlacement" : 0,
    "BTTTouchBarScriptUpdateInterval" : 3,
    "BTTTouchBarAppleScriptStringRunOnInit" : false,
    "BTTTouchBarShellScriptString" : "import re, requests, json, osascript, hashlib\nfrom bs4 import BeautifulSoup\nfrom io import open\n\ndef main():\n    # Get player state via AppleScript\n    code,output,err = getPlayerInfo()\n    # Parse\n    player_data = output.split(', ')\n    # print(player_data)\n    player_type = player_data[0]\n    # Recombine artist or title that may have been split up if commas in title\n    player_data = normalizeCommas(player_type, player_data)\n    player_artist = player_data[1].lower()      # Player artist post-normalization\n    player_song = player_data[2].lower()        # Player song post-normalization\n    player_position = int(float(player_data[3]))# Song Position\n    player_state = player_data[4].lower()       # Playing or paused?\n    if '&' in player_artist:                    # Check for multiple artists\n        player_artist_1 = re.sub(r' \\&.*$', '', player_artist)\n        player_artist_2 = re.sub(r'^.*\\& ', '', player_artist)\n    else:\n        player_artist_1 = 'n\/a'\n        player_artist_2 = 'n\/a'\n    player_artist_array = [player_artist, player_artist_1, player_artist_2]\n    # Remove extra information from title\n    player_song = cleanSong(player_song)\n    # print('\\nPlayer Full Artist: ' + player_artist + '\\nPlayer Artist 1: ' + player_artist_1 + '\\nPlayer Artist 2: ' + player_artist_2 + '\\nPlayer Song: ' + player_song)\n    if player_state != 'playing':   # Return nothing if player is paused\n        return\n    else:\n        # Access Genius API\n        accesstoken = 'PQoWxI5pVo20hSd4OI1Y3kaV1qqZfqnmZACjvXGSJeRv6-gOCaKrVWRUpzKJTor-'\n        headers = {'Authorization': 'Bearer ' + accesstoken, 'User-Agent': 'Kashi', 'Accept': 'application\/json', 'Host':'api.genius.com'}\n        params = {'q': player_artist + ' ' + player_song}\n        hits = requests.get('https:\/\/api.genius.com\/search', params = params, headers = headers).json()['response']['hits']\n        # print(\"\\nHits:\", hits)\n        hitcount = 0\n        if len(hits) > 0:\n            # Get info from top search hit that contains player artist\n            while hitcount < len(hits) - 1 and not any([x in hits[hitcount]['result']['primary_artist']['name'].lower() for x in player_artist_array]):\n                hitcount += 1                                           # Go to next hit\n            genius_artist = hits[hitcount]['result']['primary_artist']['name'].lower()\n            genius_song = hits[hitcount]['result']['full_title'].lower()\n            genius_url = hits[hitcount]['result']['url']\n            # print('\\nGenius Artist: ' + genius_artist + '\\nGenius Song: ' + genius_song + '\\nGenius URL: ' + genius_url + '\\n')\n            if any([y in genius_artist for y in player_artist_array]):\n                # Parse Genius HTML with BeautifulSoup and format lyrics\n                lyrics = parseAndFormat(genius_url)\n                # Print to touch bar\n                print(lyrics)\n            else:\n                # Print music quote if lyrics not found\n                printWisdom(player_song)\n        else:\n            printWisdom(player_song)\n        return\n\ndef getPlayerInfo():\n    return osascript.run('''\n    on run\n        if application \"spotify\" is running then\n            tell application \"Spotify\"\n                set currentInfo to {\"Spotify\", artist of current track, name of current track, player position, player state}\n            end tell\n        else if application \"iTunes\" is running then\n        \ttell application \"iTunes\"\n                set currentInfo to {\"iTunes\", artist of current track, name of current track, player position, player state}\n            end tell\n        end if\n        return currentInfo\n    end run\n    ''', background = False)\n\ndef normalizeCommas(player_type, player_data):\n    while len(player_data) > 5:\n        if player_type == 'iTunes':                 # iTunes: Combine artists split by comma\n            player_data[1] = player_data[1] + ', ' + player_data[2]\n            player_data.pop(2)\n        else:                                       # Spotify: Combine songs split by comma\n            player_data[2] = player_data[2] + ', ' + player_data[3]\n            player_data.pop(3)\n    return player_data\n\ndef cleanSong(songtitle):\n    songtitle = re.sub(r' -.*$', '', songtitle)     # Remove everything after dash\n    songtitle = re.sub(r' \\(.*\\)', '', songtitle)   # Remove parentheticals\n    return songtitle\n\ndef parseAndFormat(url):\n    source_soup = BeautifulSoup(requests.get(url).text, 'html.parser')  # Parse HTML\n    lyricstext = source_soup.find('div', class_ = 'lyrics').get_text()  # Get text from the lyrics <div>\n    lyricstext = re.sub(r'\\[.*\\n*.*\\]', '', lyricstext).strip()         # Remove song sections in brackets\n    lyricstext = re.sub(r'\\(.*\\n*.*\\)', '', lyricstext).strip()         # Remove parentheticals\n    while '\\n\\n' in lyricstext:                                         # Line breaks, flatten, and replace\n        lyricstext = lyricstext.replace('\\n\\n', '\\n')\n    lyricstext = lyricstext.replace('\\n', ', ').replace('?,', '?').replace('!,', '!').replace(' ,', ',').replace(' .', '.').replace('.,', '.').replace(',.', '.').replace('...', '..').replace('...', '..').replace('  ', ' ')\n    return lyricstext\n\ndef printWisdom(player_song):\n    wisdom = [\n    '\\\"Music expresses that which cannot be said and on which it is impossible to be silent.\\\" - Victor Hugo ',\n    '\\\"If music be the food of love, play on.\\\" - William Shakespeare ',\n    '\\\"Music is the movement of sound to reach the soul for the education of its virtue.\\\" - Plato ',\n    '\\\"Where words fail, music speaks.\\\" - Hans Christian Anderson ',\n    '\\\"One good thing about music, when it hits you, you feel no pain.\\\" - Bob Marley ',\n    '\\\"Words make you think a thought. Music makes you feel a feeling. A song makes you feel a thought.\\\" - E. Y. Harburg ',\n    '\\\"I haven\\'t understood a bar of music in my life, but I have felt it.\\\" - Igor Stravinsky ',\n    '\\\"And those who were seen dancing were thought to be insane by those who could not hear the music.\\\" - Nietzsche ',\n    '\\\"Without music to decorate it, time is just a bunch of boring production deadlines or dates by which bills must be paid.\\\" - Frank Zappa ',\n    '\\\"Music doesn\\'t lie. If there is something to be changed in this world, then it can only happen through music.\\\" - Jimi Hendrix ',\n    '\\\"There is geometry in the humming of the strings, there is music in the spacing of the spheres.\\\" - Pythagoras ',\n    '\\\"You are the music while the music lasts.\\\" - T. S. Eliot ',\n    '\\\"After silence, that which comes nearest to expressing the inexpressible is music.\\\" - Aldous Huxley '\n    ]\n    # Hash songname for constant quote when script refires\n    songhash = hashlib.sha224(player_song.encode('utf-8')).hexdigest()\n    songhash_int = int(songhash, base = 16)\n    # Reduce hash to within array length\n    print(wisdom[(songhash_int % (len(wisdom) + 1)) - 1])\n\nif __name__ == '__main__':\n    main()\n",
    "BTTTouchBarButtonName" : "Kashi",
    "BTTTouchBarFreeSpaceAfterButton" : 0,
    "BTTTouchBarItemIconHeight" : 22,
    "BTTTouchBarItemPadding" : 35,
    "BTTTouchBarFontColorAlternate" : "0.000000, 0.000000, 0.000000, 255.000000"
  }
}
